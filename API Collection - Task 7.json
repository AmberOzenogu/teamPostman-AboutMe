{
	"info": {
		"_postman_id": "ad182155-fe82-4c42-b503-29b4000e921d",
		"name": "API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24228769"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/todo",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.apiVersion)\r",
									"console.log(jsonData.title)\r",
									"console.log(jsonData.paymentCurrency)\r",
									"\r",
									"pm.test(\"The apiVersion should be 6.3.8.0\", function () {\r",
									"\r",
									"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"pm.test(\"The title should be Fusio\", function () {\r",
									"\r",
									"    pm.expect(jsonData.title).to.eql(\"Fusio\");\r",
									"});\r",
									"\r",
									"pm.test(\"The paymentCurrency should be EUR\", function () {\r",
									"\r",
									"    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches the categories string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"categories\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches the scopes string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"scopes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches the apps string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"apps\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches the links string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"links\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches the default string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"default\");\r",
									"});\r",
									"\r",
									"/**\r",
									" * \r",
									" * pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									" */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								""
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/todo/?todo_id=2",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "2"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"pm.test(\"Body matches the russian string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The Russian\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches true string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches type string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches available string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"available\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response[0].name)\r",
									"console.log(response[1].name)\r",
									"console.log(response[2].name)\r",
									"console.log(response[3].name)\r",
									"\r",
									"pm.test(\"The first response name should be The Russian\", function () {\r",
									"\r",
									"    pm.expect(response[0].name).to.eql(\"The Russian\");\r",
									"});\r",
									"\r",
									"pm.test(\"The second response name should be The Vanishing Half\", function () {\r",
									"\r",
									"    pm.expect(response[1].name).to.eql(\"The Vanishing Half\");\r",
									"});\r",
									"\r",
									"pm.test(\"The third response name should be The Midnight Library\", function () {\r",
									"\r",
									"    pm.expect(response[2].name).to.eql(\"The Midnight Library\");\r",
									"});\r",
									"\r",
									"pm.test(\"The fourth response name should be Viscount Who Loved Me\", function () {\r",
									"\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?type=fiction",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have a Created string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.created)\r",
									"\r",
									"pm.test(\"The Created should be true\", function () {\r",
									"\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches orderId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"orderId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches created string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created\");\r",
									"});\r",
									"\r",
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4500057637738598a9c4c200c9e96aecc01f5019ca514c8e1e9095424ba908be",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have a Created string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.created)\r",
									"\r",
									"pm.test(\"The Created should be true\", function () {\r",
									"\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches orderId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"orderId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches created string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4500057637738598a9c4c200c9e96aecc01f5019ca514c8e1e9095424ba908be",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"Jane\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"pm.test(\"Body matches John string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches bookId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"bookId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches quantity string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches createdBy string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"createdBy\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response[0].customerName)\r",
									"console.log(response[1].customerName)\r",
									"console.log(response[2].quantity)\r",
									"\r",
									"pm.test(\"The first response customerName should be John\", function () {\r",
									"\r",
									"    pm.expect(response[0].customerName).to.eql(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"The second response customerName should be Jane\", function () {\r",
									"\r",
									"    pm.expect(response[1].customerName).to.eql(\"Jane\");\r",
									"});\r",
									"\r",
									"pm.test(\"The third response quantity should be 1\", function () {\r",
									"\r",
									"    pm.expect(response[2].quantity).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4500057637738598a9c4c200c9e96aecc01f5019ca514c8e1e9095424ba908be",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should have 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.quantity)\r",
									"console.log(jsonData.customerName)\r",
									"console.log(jsonData.bookId)\r",
									"\r",
									"pm.test(\"The quantity should be 1\", function () {\r",
									"\r",
									"    pm.expect(jsonData.quantity).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"The customerName should be John\", function () {\r",
									"\r",
									"    pm.expect(jsonData.customerName).to.eql(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"The bookId should be 1\", function () {\r",
									"\r",
									"    pm.expect(jsonData.bookId).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches timestamp string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches createdBy string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"createdBy\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4500057637738598a9c4c200c9e96aecc01f5019ca514c8e1e9095424ba908be",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/:orderId",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "lgWahn1cqeMSHCa9Ntvhb"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have a No Content string\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4500057637738598a9c4c200c9e96aecc01f5019ca514c8e1e9095424ba908be",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/:orderId",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "8S4E_JBLf_jrSrr_ETG2Y"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}